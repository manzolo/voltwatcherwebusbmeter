services:
  - mysql:5.7

stages:
    - createdb
    - test
    - build
    - deploy
    - publish
    #- restart_container
    
variables:
  DATABASE_URL: $DATABASE_URL
  MAILER_DSN: $MAILER_DSN
  DISPLAY: ":0.0"
  
  MYSQL_DATABASE: $MYSQL_DATABASE
  MYSQL_HOST: $MYSQL_HOST
  MYSQL_ROOT_PASSWORD: $MYSQL_ROOT_PASSWORD
  MYSQL_USER: $MYSQL_USER
  MYSQL_PASSWORD: $MYSQL_PASSWORD
      
  TAG_COMMIT: $CI_REGISTRY_IMAGE:$CI_COMMIT_TAG
  TAG_LATEST: $CI_REGISTRY_IMAGE:latest

cache:
  key: ${CI_COMMIT_REF_SLUG}
  paths:
    - vendor/
    - .composer_cache

CreateDatabase:
    image: mysql:5.7
    stage: createdb
    script:
      - echo "SELECT 'OK';" | mysql -uroot -p"$MYSQL_ROOT_PASSWORD" -h mysql "$MYSQL_DATABASE"
      - echo "CREATE USER '$MYSQL_USER'@'$MYSQL_HOST' IDENTIFIED BY '$MYSQL_PASSWORD';" | mysql -uroot -p"$MYSQL_ROOT_PASSWORD" -h mysql "$MYSQL_DATABASE"
      - echo "CREATE DATABASE IF NOT EXISTS $MYSQL_DATABASE DEFAULT CHARACTER SET 'utf8' COLLATE 'utf8_unicode_ci';" | mysql -uroot -p"$MYSQL_ROOT_PASSWORD" -h mysql "$MYSQL_DATABASE"

Check:
    image: $CI_REGISTRY/$CI_PROJECT_NAMESPACE/php8.1-apache-full
    stage: build
    script:
      - composer config cache-files-dir .composer_cache
      - composer install --no-dev --optimize-autoloader --no-interaction
      - bin/console lint:yaml config --parse-tags
      # this checks that the Twig template files contain no syntax errors
      - bin/console lint:twig templates --env=prod
      # this checks that the XLIFF translations contain no syntax errors
      - bin/console lint:xliff translations
      # this checks that arguments injected into services match type declarations
      - bin/console lint:container
      # this checks that the application doesn't use dependencies with known security vulnerabilities
      - symfony security:check
      # Install environment
      - bin/console bicorebundle:install admin admin admin@admin.it
      - bin/console voltwatcher:install
      # this checks that Doctrine's mapping configurations are valid
      - bin/console doctrine:schema:validate --skip-sync -vvv --no-interaction
    
Test:
    image: $CI_REGISTRY/$CI_PROJECT_NAMESPACE/php8.1-apache-full
    stage: test
    script:
      - composer config cache-files-dir .composer_cache
      - sleep 300
      - ant

Deploy:
  stage: deploy
  image: docker/compose:latest
  before_script:
    - echo "Manzolo debug:"
    - echo "Registry:"$CI_REGISTRY
    - echo "Latest image tag:"$TAG_LATEST
    - echo "Deploy image tag:"$TAG_COMMIT
  script:
    #- docker-compose build --no-cache
    - docker-compose build
    - echo "$CI_BUILD_TOKEN" | docker login $CI_REGISTRY --username gitlab-ci-token --password-stdin
    #- docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN $CI_REGISTRY      
    - docker push $TAG_LATEST
    - docker tag $TAG_LATEST $TAG_COMMIT
    - docker push $TAG_COMMIT
    #- ssh $USER_AT_DOCKER "sed -i \"s/APP_IMAGE_TAG=.*/APP_IMAGE_TAG=$CI_COMMIT_TAG/\" /home/manzolo/$CI_PROJECT_NAME/.env"
    #- ssh $USER_AT_DOCKER "cd /home/manzolo/$CI_PROJECT_NAME && docker-compose pull && docker-compose down && docker-compose up -d"
  #when: manual
  #environment:
  #  name: prod
  rules:
    - if: '$CI_COMMIT_TAG != null'

Publish:
  stage: publish
  image: docker:latest
  services:
    - docker:dind
  before_script:
    #- env
    #- echo "docker login -u $DOCKER_HUB_REGISTRY_USER -p $DOCKER_HUB_REGISTRY_PASSWORD $DOCKER_HUB_REGISTRY"
    - echo "$DOCKER_HUB_REGISTRY_PASSWORD" | docker login $DOCKER_HUB_REGISTRY --username $DOCKER_HUB_REGISTRY_USER --password-stdin
    #- docker login -u $DOCKER_HUB_REGISTRY_USER -p $DOCKER_HUB_REGISTRY_PASSWORD $DOCKER_HUB_REGISTRY
  script:
    - docker tag $TAG_LATEST $DOCKER_HUB_REGISTRY_IMAGE:latest
    - docker push $DOCKER_HUB_REGISTRY_IMAGE:latest
    - docker tag $TAG_COMMIT $DOCKER_HUB_REGISTRY_IMAGE:$CI_COMMIT_TAG
    - docker push $DOCKER_HUB_REGISTRY_IMAGE:$CI_COMMIT_TAG
    - docker rmi $DOCKER_HUB_REGISTRY_IMAGE:$CI_COMMIT_TAG
    - docker rmi $DOCKER_HUB_REGISTRY_IMAGE:latest
  rules:
    - if: '$CI_COMMIT_TAG != null'
      when: manual

#restart_container:
#  stage: restart_container
#  script:
#    - ls -al $NAMEDPIPE
#    - echo $RESTART_CONTAINER_CMD
#    - echo $NAMEDPIPE
#    - echo "$RESTART_CONTAINER_CMD" > $NAMEDPIPE
#  rules:
#    - if: '$CI_COMMIT_TAG != null'
#      when: manual    

